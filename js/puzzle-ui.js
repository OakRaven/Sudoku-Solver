// Generated by CoffeeScript 1.3.3
(function() {

  this.PuzzleUi = (function() {

    function PuzzleUi() {
      this.currentlySelectedRow = null;
      this.currentlySelectedCol = null;
      this.currentlySelectedCell = null;
      this.samplePuzzle = [[0, 0, 0, 0, 0, 0, 7, 4, 0], [0, 0, 1, 0, 0, 5, 3, 0, 2], [0, 3, 4, 7, 0, 0, 0, 5, 6], [0, 0, 7, 0, 2, 0, 0, 6, 0], [0, 0, 0, 9, 0, 3, 0, 0, 0], [0, 1, 0, 0, 4, 0, 2, 0, 0], [5, 4, 0, 0, 0, 7, 9, 2, 0], [1, 0, 6, 3, 0, 0, 5, 0, 0], [0, 7, 8, 0, 0, 0, 0, 0, 0]];
      this.emptyPuzzle = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
    }

    PuzzleUi.prototype.highlightRow = function(row) {
      if (this.currentlySelectedRow) {
        $(this.currentlySelectedRow).removeClass('highlight');
      }
      $(row).addClass('highlight');
      return this.currentlySelectedRow = row;
    };

    PuzzleUi.prototype.highlightColumn = function(col) {
      var column;
      if (this.currentlySelectedCol) {
        $('#grid tr td:nth-child(' + this.currentlySelectedCol + ')').removeClass('highlight');
      }
      column = $(col).index() + 1;
      $('#grid tr td:nth-child(' + column + ')').addClass('highlight');
      return this.currentlySelectedCol = column;
    };

    PuzzleUi.prototype.hideEdit = function(cell) {
      var $cell, value;
      $cell = $(cell);
      value = $cell.find('input').val();
      $cell.find('span').text(value);
      return $(this.currentlySelectedCell).removeClass('selected-cell');
    };

    PuzzleUi.prototype.displayEdit = function(cell) {
      if (this.currentlySelectedCell) {
        this.hideEdit(this.currentlySelectedCell);
      }
      $(cell).addClass('selected-cell');
      $(cell).find('input').select();
      return this.currentlySelectedCell = cell;
    };

    PuzzleUi.prototype.unhighlight = function() {
      if (this.currentlySelectedCell) {
        this.hideEdit(this.currentlySelectedCell);
      }
      if (this.currentlySelectedCol) {
        $('#grid tr td:nth-child(' + this.currentlySelectedCol + ')').removeClass('highlight');
      }
      if (this.currentlySelectedRow) {
        return $(this.currentlySelectedRow).removeClass('highlight');
      }
    };

    PuzzleUi.prototype.extractGridValues = function() {
      var values;
      values = [];
      $.each($('#grid tr'), function(rowIndex, rowPuzzle) {
        var row;
        row = [];
        $.each($(rowPuzzle).find('td'), function(colIndex, cellPuzzle) {
          var $span;
          $span = $(cellPuzzle).find('span');
          return row.push(parseInt($span.text().trim()) || 0);
        });
        return values.push(row);
      });
      return values;
    };

    PuzzleUi.prototype.pushSolution = function(result) {
      return $.each(result, function(rowIndex, rowSolution) {
        var $tr;
        $tr = $('#grid tr:nth-child(' + (rowIndex + 1) + ')');
        return $.each(result[rowIndex], function(colIndex, cellValue) {
          var $input, $span, $td, value;
          $td = $($tr).find('td:nth-child(' + (colIndex + 1) + ')');
          $span = $($td).find('span');
          $input = $($td).find('input');
          value = $span.text();
          if (value === '') {
            $span.text(cellValue);
            $span.addClass('solved');
            return $input.val(cellValue);
          }
        });
      });
    };

    PuzzleUi.prototype.presetBoard = function(puzzle) {
      return $.each($('#grid tr'), function(rowIndex, rowPuzzle) {
        return $.each($(rowPuzzle).find('td'), function(colIndex, cellPuzzle) {
          var $input, $span, value;
          value = puzzle[rowIndex][colIndex];
          $input = $(cellPuzzle).find('input');
          $span = $(cellPuzzle).find('span');
          $span.removeClass('solved');
          if (value > 0) {
            $input.val(value);
            return $span.text(puzzle[rowIndex][colIndex]);
          } else {
            $input.val('');
            return $span.text('');
          }
        });
      });
    };

    PuzzleUi.prototype.initializeBoard = function() {
      var _this = this;
      $('#grid').on('mouseenter', 'tr', function(e) {
        return _this.highlightRow($(e.currentTarget));
      });
      $('#grid').on('mouseenter', 'td', function(e) {
        return _this.highlightColumn($(e.currentTarget));
      });
      $('#grid').on('click', 'td', function(e) {
        return _this.displayEdit($(e.currentTarget));
      });
      $('#grid').on('mouseleave', 'table', function(e) {
        return _this.unhighlight();
      });
      $('#grid').on('keypress', 'input', function(e) {
        var keyPressed;
        keyPressed = String.fromCharCode(e.keyCode);
        if ($.inArray(keyPressed, ['1', '2', '3', '4', '5', '6', '7', '8', '9']) === -1) {
          return e.preventDefault();
        }
      });
      $('#solve-btn').on('click', function(e) {
        var gridValues, result, solver;
        e.preventDefault();
        gridValues = _this.extractGridValues();
        solver = new SudokuSolver();
        result = solver.solve(gridValues);
        return _this.pushSolution(result);
      });
      $('#sample-btn').on('click', function(e) {
        e.preventDefault();
        return _this.presetBoard(_this.samplePuzzle);
      });
      return $('#clear-btn').on('click', function(e) {
        e.preventDefault();
        return _this.presetBoard(_this.emptyPuzzle);
      });
    };

    return PuzzleUi;

  })();

}).call(this);
