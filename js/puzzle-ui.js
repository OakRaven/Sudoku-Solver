// Generated by CoffeeScript 1.3.3
(function() {

  this.PuzzleUi = (function() {

    function PuzzleUi() {
      this.currentlySelectedRow = null;
      this.currentlySelectedCol = null;
      this.currentlySelectedCell = null;
      this.samplePuzzle = [[0, 0, 0, 0, 0, 0, 7, 4, 0], [0, 0, 1, 0, 0, 5, 3, 0, 2], [0, 3, 4, 7, 0, 0, 0, 5, 6], [0, 0, 7, 0, 2, 0, 0, 6, 0], [0, 0, 0, 9, 0, 3, 0, 0, 0], [0, 1, 0, 0, 4, 0, 2, 0, 0], [5, 4, 0, 0, 0, 7, 9, 2, 0], [1, 0, 6, 3, 0, 0, 5, 0, 0], [0, 7, 8, 0, 0, 0, 0, 0, 0]];
      this.emptyPuzzle = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
    }

    PuzzleUi.prototype.highlightRow = function(row) {
      if (this.currentlySelectedRow) {
        $(this.currentlySelectedRow).removeClass('highlight');
      }
      $(row).addClass('highlight');
      return this.currentlySelectedRow = row;
    };

    PuzzleUi.prototype.highlightColumn = function(col) {
      var column;
      if (this.currentlySelectedCol) {
        $('#grid tr td:nth-child(' + this.currentlySelectedCol + ')').removeClass('highlight');
      }
      column = $(col).index() + 1;
      $('#grid tr td:nth-child(' + column + ')').addClass('highlight');
      return this.currentlySelectedCol = column;
    };

    PuzzleUi.prototype.hideEdit = function(cell) {
      var $cell, value;
      $cell = $(cell);
      value = $cell.find('input').val();
      $cell.find('span').text(value);
      return $(this.currentlySelectedCell).removeClass('selected-cell');
    };

    PuzzleUi.prototype.displayEdit = function(cell) {
      if (this.currentlySelectedCell) {
        this.hideEdit(this.currentlySelectedCell);
      }
      $(cell).addClass('selected-cell');
      $(cell).find('input').select();
      return this.currentlySelectedCell = cell;
    };

    PuzzleUi.prototype.unhighlight = function() {
      if (this.currentlySelectedCell) {
        this.hideEdit(this.currentlySelectedCell);
      }
      if (this.currentlySelectedCol) {
        $('#grid tr td:nth-child(' + this.currentlySelectedCol + ')').removeClass('highlight');
      }
      if (this.currentlySelectedRow) {
        return $(this.currentlySelectedRow).removeClass('highlight');
      }
    };

    PuzzleUi.prototype.extractGridValues = function() {
      var values;
      values = [];
      $.each($('#grid tr'), function(rowIndex, rowPuzzle) {
        var row;
        row = [];
        $.each($(rowPuzzle).find('td'), function(colIndex, cellPuzzle) {
          var $span;
          $span = $(cellPuzzle).find('span');
          return row.push(parseInt($span.text().trim()) || 0);
        });
        return values.push(row);
      });
      return values;
    };

    PuzzleUi.prototype.set = function(row, col, num, cssclass) {
      var $col, $input, $row, $span;
      if (cssclass == null) {
        cssclass = null;
      }
      $row = $('#grid tr:nth-child(' + (row + 1) + ')');
      $col = $($row).find('td:nth-child(' + (col + 1) + ')');
      $span = $($col).find('span');
      $input = $($col).find('input');
      if ($span.text() === '') {
        if (cssclass) {
          $span.addClass(cssclass);
        }
        $span.text(num);
        $input.val(num);
        if (cssclass) {
          return $col.effect('highlight', {}, 1500);
        }
      }
    };

    PuzzleUi.prototype.clear_board = function() {
      $('#grid td input').val('');
      $('#grid td span').text('');
      return $('#grid td span').removeClass('solved');
    };

    PuzzleUi.prototype.pushSolution = function(result) {
      var col, colIndex, cssclass, row, rowIndex, value, _i, _j, _len, _len1, _results;
      $('#grid td span').removeClass('solved');
      rowIndex = 0;
      _results = [];
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        row = result[_i];
        colIndex = 0;
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          col = row[_j];
          value = result[rowIndex][colIndex];
          cssclass = 'solved' != null ? 'solved' : value > {
            0: null
          };
          if (value) {
            this.set(rowIndex, colIndex, value, cssclass);
          }
          colIndex += 1;
        }
        _results.push(rowIndex += 1);
      }
      return _results;
    };

    PuzzleUi.prototype.presetBoard = function(puzzle) {
      var col, colIndex, row, rowIndex, value, _i, _j, _len, _len1, _results;
      this.clear_board();
      rowIndex = 0;
      _results = [];
      for (_i = 0, _len = puzzle.length; _i < _len; _i++) {
        row = puzzle[_i];
        colIndex = 0;
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          col = row[_j];
          value = puzzle[rowIndex][colIndex];
          if (value) {
            this.set(rowIndex, colIndex, value);
          }
          colIndex += 1;
        }
        _results.push(rowIndex += 1);
      }
      return _results;
    };

    PuzzleUi.prototype.hide_alert = function() {
      return $('#alert-panel').hide();
    };

    PuzzleUi.prototype.show_alert = function() {
      return $('#alert-panel').show();
    };

    PuzzleUi.prototype.initializeBoard = function() {
      var _this = this;
      $('#alert-panel .close').on('click', function() {
        return _this.hide_alert();
      });
      $('#grid').on('mouseenter', 'tr', function(e) {
        return _this.highlightRow($(e.currentTarget));
      });
      $('#grid').on('mouseenter', 'td', function(e) {
        return _this.highlightColumn($(e.currentTarget));
      });
      $('#grid').on('click', 'td', function(e) {
        return _this.displayEdit($(e.currentTarget));
      });
      $('#grid').on('mouseleave', 'table', function(e) {
        return _this.unhighlight();
      });
      $('#grid').on('keypress', 'input', function(e) {
        var keyPressed;
        keyPressed = String.fromCharCode(e.keyCode);
        if ($.inArray(keyPressed, ['1', '2', '3', '4', '5', '6', '7', '8', '9']) === -1) {
          return e.preventDefault();
        }
      });
      $('#solve-btn').on('click', function(e) {
        var gridValues, result, solver;
        e.preventDefault();
        gridValues = _this.extractGridValues();
        solver = new SudokuSolver(gridValues);
        if (solver.is_valid_puzzle()) {
          result = solver.solve();
          return _this.pushSolution(result);
        } else {
          return _this.show_alert();
        }
      });
      $('#sample-btn').on('click', function(e) {
        e.preventDefault();
        return _this.presetBoard(_this.samplePuzzle);
      });
      $('#clear-btn').on('click', function(e) {
        e.preventDefault();
        return _this.presetBoard(_this.emptyPuzzle);
      });
      return $('#hint-btn').on('click', function(e) {
        var gridValues, hint, solver;
        e.preventDefault();
        gridValues = _this.extractGridValues();
        solver = new SudokuSolver(gridValues);
        if (solver.is_valid_puzzle()) {
          hint = solver.get_hint();
          if (hint) {
            return _this.set(hint.row, hint.column, hint.value, 'solved');
          }
        } else {
          return _this.show_alert();
        }
      });
    };

    return PuzzleUi;

  })();

}).call(this);
