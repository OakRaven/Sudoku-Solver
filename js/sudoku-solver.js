// Generated by CoffeeScript 1.3.3
(function() {

  this.SudokuSolver = (function() {

    function SudokuSolver() {
      this.puzzle = [];
      this.size = 0;
      this.squareSize = 0;
    }

    SudokuSolver.prototype.solve_cell = function(row, col) {
      var num, _i, _ref;
      if (col >= this.size) {
        return true;
      } else if (row >= this.size) {
        return this.solve_cell(0, col + 1);
      } else if (this.puzzle[row][col] !== 0) {
        return this.solve_cell(row + 1, col);
      }
      for (num = _i = 1, _ref = this.size; 1 <= _ref ? _i <= _ref : _i >= _ref; num = 1 <= _ref ? ++_i : --_i) {
        if (this.valid(row, col, num)) {
          this.set(row, col, num);
          if (this.solve_cell(row + 1, col)) {
            return true;
          }
        }
      }
      this.set(row, col, 0);
      return false;
    };

    SudokuSolver.prototype.solve = function(puzzle) {
      this.puzzle = puzzle;
      this.size = this.puzzle.length;
      this.squareSize = Math.sqrt(this.size);
      this.solve_cell(0, 0);
      return this.puzzle;
    };

    SudokuSolver.prototype.set = function(row, col, num) {
      return this.puzzle[row][col] = num;
    };

    SudokuSolver.prototype.get = function(row, col) {
      return this.puzzle[row][col];
    };

    SudokuSolver.prototype.valid = function(row, col, num) {
      var isValid;
      isValid = this.valid_in_row(row, col, num) && this.valid_in_col(row, col, num) && this.valid_in_square(row, col, num);
      return isValid;
    };

    SudokuSolver.prototype.valid_in_row = function(row, col, num) {
      var index, _i, _ref;
      for (index = _i = 0, _ref = this.size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
        if (index !== col && this.get(row, index) === num) {
          return false;
        }
      }
      return true;
    };

    SudokuSolver.prototype.valid_in_col = function(row, col, num) {
      var index, _i, _ref;
      for (index = _i = 0, _ref = this.size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
        if (index !== row && this.get(index, col) === num) {
          return false;
        }
      }
      return true;
    };

    SudokuSolver.prototype.valid_in_square = function(row, col, num) {
      var c, c1, r, r1, _i, _j, _ref, _ref1;
      r1 = Math.floor(row / this.squareSize) * this.squareSize;
      c1 = Math.floor(col / this.squareSize) * this.squareSize;
      for (r = _i = r1, _ref = r1 + this.squareSize - 1; r1 <= _ref ? _i <= _ref : _i >= _ref; r = r1 <= _ref ? ++_i : --_i) {
        for (c = _j = c1, _ref1 = c1 + this.squareSize - 1; c1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; c = c1 <= _ref1 ? ++_j : --_j) {
          if (r !== row && c !== col && this.get(r, c) === num) {
            return false;
          }
        }
      }
      return true;
    };

    return SudokuSolver;

  })();

}).call(this);
